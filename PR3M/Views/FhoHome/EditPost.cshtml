@model PR3M.Models.PostEditViewModel
@using PR3M.Common
@section HeaderAndFooter{
    <link href="~/Content/Css/CssHeader1.css" rel="stylesheet" />
    <link href="~/Content/Css/CssFooter.css" rel="stylesheet" />
}
@section PrivateCss{
    <style>
        h2 {
            font-weight: bold;
            color: orange;
            font-family: sans-serif;
        }

        .col-md-10 {
            width: 30%;
        }

        .DetailsPage {
            padding: 0rem 45px 3rem 45px;
        }

        h3 {
            padding: 0rem 0rem 1rem 0rem;
            color: red;
        }

        h4 {
            color: green;
            font-size: 20px;
        }

        hr {
            border: 0px;
            background-color: orange;
            height: 2px;
        }

        a.backPage {
            text-decoration: none;
            color: blue;
            font-size: 16px;
            font-family: sans-serif;
        }

        dd {
            padding: 5px;
        }

        dt {
            padding: 5px;
        }

        a.EditPageDetails {
            text-decoration: none;
            font-size: 14px;
            font-family: sans-serif;
            color: blue;
        }

        .checkbox input[type=checkbox], .checkbox-inline input[type=checkbox], .radio input[type=radio], .radio-inline input[type=radio] {
            position: absolute;
            margin-top: 4px\9;
            margin-left: 0px;
        }

        .EditPost-FEHO {
            padding: 0px 45px 3rem 45px;
        }

        .btn-uploadFile {
            margin-bottom: 0.5rem;
            padding: 3px 16px;
            font-size: 18px;
            line-height: 1.3333333;
            border-radius: 6px;
            color: #fff;
            background-color: #5cb85c;
            border-color: #4cae4c;
            display: inline-block;
            font-weight: 400;
            text-align: center;
            white-space: nowrap;
            vertical-align: middle;
            touch-action: manipulation;
            cursor: pointer;
            background-image: none;
            border: 1px solid transparent;
        }

        .hide-input-file {
            width: 0.1px;
            height: 0.1px;
            opacity: 0;
            overflow: hidden;
            position: absolute;
            z-index: -1;
        }

            .hide-input-file + label {
                font-size: 1.25em;
                font-weight: 700;
            }

                .hide-input-file:focus + label,
                .hide-input-file + label:hover {
                }

        .img-in-labelFileImage {
            width: 40rem;
            height: 40rem;
            object-fit: cover;
            padding: 28px;
        }

        .label-in-inputFile {
            width: 40rem;
            height: 40rem;
            border: 1px solid black;
        }

        .div-input-file {
            /*border: 1px solid black;*/
            border-radius: 5px;
            height: 0px;
            margin-bottom: 2rem;
            display: flex;
            flex-wrap: wrap;
        }

        .div-oneLine-fileInput {
            display: flex;
            width: 100%;
        }

        .div-file-input-toSystem {
            width: 40rem;
            margin: 1%;
            height: 50rem;
            /* border: 1px solid black; */
            border-radius: 5px;
            /* padding: 1rem;*/
        }

        .active {
            border: 2px solid black;
        }
    </style>
}
<div class="EditPost-FEHO">
    <h2>EditPost</h2>

    @using (Html.BeginForm("EditPost","FhoHome",FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>PostEditViewModel</h4>
            <hr />
            @Html.HiddenFor(model => model.PostId, Model.PostId)
            <div class="form-group">
                @Html.LabelFor(model => model.PostTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PostTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PostEngTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PostEngTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostEngTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsPublic)
                        @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-success" />
                </div>
            </div>

            <div class="btn-uploadFile" id="div-uploadFile">
                <i class="fa fa-folder" aria-hidden="true"></i><label id="btn-uploadFile0"><input class="hide-input-file" type="file" onchange="displayFileToDivInput(event)" name="fileInputReal" id="fileInput0" multiple="multiple" />Choose a file</label>
            </div>
            <br />
            <br />
            @if (Model.Materials == null || Model.Materials.Count() < 1)
            {
                <div class="div-input-file" id="dropSection">
                </div>
            }
            else
            {
                <div class="div-input-file" id="dropSection" style="height:auto;border:1px solid black;">
                    @foreach (PR3M.DBModel.Material m in Model.Materials)
                    {
                    @Html.Hidden("MaterialId", m.MaterialId)
                    <div class="div-file-input-toSystem" id="divFileInputToSystem@(m.MaterialId)">
                        <label class="label-in-inputFile" id="labelInInputFile@(m.MaterialId)">
                            <span onclick="deleteOldMaterial(@m.MaterialId)" class="close" style="position:absolute">x</span>
                            @Html.Hidden("ChangeStatus","Nothing",new { @id = "ChangeStatus"+m.MaterialId})
                            @{
                                int type = CommonOutput.typeOfMIME(m.MIMEType);
                                if (type == 1)
                                {
                                    if (Model.IsLogo)
                                    {
                                        <img id="iconForOldFile@(m.MaterialId)" class="img-in-labelFileImage" src="/Content/Materials/Root/Logo/@(m.Post.PostHashRealFolder+"/"+ m.MaterialName+"."+ m.MIMEType)">
                                    }
                                    else
                                    {
                                        <img id="iconForOldFile@(m.MaterialId)" class="img-in-labelFileImage" src="/Content/Materials/Root/Post/@(m.Post.PostHashRealFolder+"/"+ m.MaterialName+"."+ m.MIMEType)">
                                    }
                                }
                                else
                                {
                                    if (m.ImageAvatar == null)
                                    {
                                        <img id="iconForOldFile@(m.MaterialId)" class="img-in-labelFileImage" src="/Content/Image/Icon/@(m.MIMEType+".png")">
                                    }
                                    else
                                    {
                                        if (Model.IsLogo)
                                        {
                                            <img id="iconForOldFile@(m.MaterialId)" class="img-in-labelFileImage" src="/Content/Materials/Root/Logo/@(m.Post.PostHashRealFolder+"/"+ m.ImageAvatar)">
                                        }
                                        else
                                        {
                                            <img id="iconForOldFile@(m.MaterialId)" class="img-in-labelFileImage" src="/Content/Materials/Root/Post/@(m.Post.PostHashRealFolder+"/"+ m.ImageAvatar)">
                                        }
                                    }

                                }

                            }
                        </label>
                        <div>
                            Caption: <input type="text" class="name-file-input" value="@m.MaterialDisplayName" name="displayNameFileInput" onchange="SetChangeStatus(@m.MaterialId)">
                        </div>
                        <div>
                            Type : @m.MIMEType
                        </div>
                        @if (type != 1)
                        {
                            <input type="file" accept="image/*" name="avatarImageInput" onchange="changeOldFileImageAvatar(event,@m.MaterialId)" />
                        } else
                        {
                            <input type="file" accept="image/*" style="width:0px;height:0px;z-index:-999;overflow:hidden"  name="avatarImageInput" onchange="changeOldFileImageAvatar(event,@m.MaterialId)" />
                        }
                    </div>
                        
                    }
                </div>
            }
        </div>
    }

    <div>
        @Html.ActionLink("Quay trở lại", "Index", null, new { @class = "backPage" })
    </div>
</div>

@section scripts{
    <script>
        var inputCount = 0;
        var index = @ViewBag.index;
        var indexLoadImage = 0;
        function displayFileToDivInput(e) {
            var files = e.target.files;

            for (var i = 0, file; file = files[i]; i++) {

                //Handle file data before set to input file
                (function (file) {
                    var fileName = files[i].name;
                    var extension = fileName.replace(/^.*\./, '');
                    var size = files[i].size;
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        //Get div input section -> divInput
                        $divInput = $('#dropSection');
                        //append new label and input file into div oneLine
                        $label = $('<label class="label-in-inputFile" />');
                        $img = $('<img id="iconForFile' + index + '" class="img-in-labelFileImage" src="/Content/Image/Icon/' + extension + '.png"/>');
                        //$input = $('<input type="file" name="fileInput" class="hide-input-file" id="file-input-in-divInput' + index + '" />');
                        $divFileInputToSystem = $('<div class="div-file-input-toSystem">')
                        $label.append($img);
                        //$label.append($input);
                        $divFileInputToSystem.append($label);
                        //append div caption and div size input into div oneLine
                        $divCaptionInput = $('<div>Caption: <input type="text" class="name-file-input" value="' + fileName + '" name="displayNameFileInput" /></div>');
                        $divSizeInput = $('<div>Size: ' + size + '</div>');
                        $divFileInputToSystem.append($divCaptionInput);
                        $divFileInputToSystem.append($divSizeInput);
                        //append div oneLine into divInput
                        $divInput.append($divFileInputToSystem);

                        if (isImage(extension)) {
                            var url = reader.result;
                            var iconForFile = document.getElementById("iconForFile" + index);
                            indexLoadImage++;
                            iconForFile.src = url;
                        } else {
                            url = "/Content/Image/Icon/" + extension + ".png";
                            var iconForFile = document.getElementById("iconForFile" + indexLoadImage);
                            indexLoadImage++;
                            iconForFile.src = url;
                        }
                        index = index + 1;
                    }
                    reader.readAsDataURL(file, "UTF-8");
                })(files[i]);
            }
            hideThis(inputCount);
            //$('input[id = "fileInput"]').val('');
        }

        function changeOldFileImageAvatar(evt, MaterialId) {
            evt.stopPropagation();
            evt.preventDefault();
            var files = evt.target.files;
            var file = files[0];
            var fileReader = new FileReader();
            var fileName = file.name;
            //var size = e.target.files[0].
            var extension = fileName.replace(/^.*\./, '');
            var size = parseInt(evt.target.files[0].size);
            fileReader.onload = function (progressEvent) {
                if (isImage(extension)) {
                    var url = fileReader.result;
                    var iconForFile = document.getElementById("iconForOldFile" + MaterialId);
                    iconForFile.src = url;
                    $('#ChangeStatus' + MaterialId).val('Changed');
                    $('#divFileInputToSystem' + MaterialId).css('border', '1px solid orange');
                    $('#labelInInputFile' + MaterialId).css('border', '1px solid orange');
                } 
            }
            fileReader.readAsDataURL(file);
        }

        function isImage(extension) {
            var imageExtensions = ["apng", "bmp", "gif", "ico", "cur", "jpg", "jpeg", "jfif", "pjpeg", "pjp", "png", "svg", "tif", "tiff", "webp"];
            return imageExtensions.includes(extension);
        }

        function SetChangeStatus(MaterialId) {
            $('#ChangeStatus' + MaterialId).val('Changed');
            $('#divFileInputToSystem' + MaterialId).css('border', '1px solid orange');
            $('#labelInInputFile' + MaterialId).css('border', '1px solid orange');
        }

        function hideThis(idToHide) {
            $inputToHide = $('#btn-uploadFile' + idToHide);
            inputCount = inputCount + 1;
            $inputToHide.hide();
            $("#div-uploadFile").append('<label id="btn-uploadFile' + inputCount + '" ><input class="hide-input-file" onclick="hideThis(' + inputCount + ')" onchange="displayFileToDivInput(event)" type="file" name="fileInputReal" id="fileInput' + inputCount + '"  multiple="multiple" />Choose a file</label>');
        }

        function deleteOldMaterial(MaterialId) {
            $('#ChangeStatus' + MaterialId).val('Delete');
            $('#divFileInputToSystem' + MaterialId).hide();
            $('#labelInInputFile' + MaterialId).hide();
        }
    </script>
}
